const cv = require('@u4/opencv4nodejs');
const math = require('mathjs');
const path = require('path');
const fs = require('fs');

/* M is 40, the dimension of the random pattern, i.e. M x M */
const M = 40;

/* W is the random pattern */
/*
let W = 
[2.0211,0.5018,-1.9983,0.2723,0.3368,0.1378,-1.6106,-1.0075,
  -0.5144,-2.0889,1.0461,0.2153,-0.1624,-0.1758,1.1022,0.5150,
  0.1770,0.2505,1.5957,0.7204,0.9246,1.5985,-0.7592,0.1563,-0.6127,
  1.2769,1.4401,0.9483,-0.6553,0.6555,0.5042,1.1161,0.7997,-0.2400,
  -0.2468,-1.7171,-0.2591,-2.8881,0.7486,0.1583,2.2664,0.8536,0.2489,
  -0.3388,-1.8265,1.2964,-0.1060,0.2325,-1.5791,-0.6983,1.6993,1.2974,
  -0.0565,-0.0349,-0.4341,-0.7800,1.7504,1.1294,-0.9810,2.1674,1.2917,
  -0.8704,1.3713,-1.9612,-0.1115,-0.7416,-2.1373,-1.7813,-0.2393,0.3865,
  -0.3882,-1.5516,0.9784,-0.0081,-0.5400,2.0317,0.9798,-0.1432,0.7242,
  1.2682,0.6903,-1.7560,0.3210,0.8992,-1.2081,-0.7309,-1.1523,-0.1015,
  -4.0341,0.9498,-0.5712,1.5063,-1.5377,-1.1560,-0.6875,-0.3609,-3.1608,
  -0.7484,-1.2097,0.0181,2.3393,1.3657,1.0145,-0.4558,-1.4736,-0.5326,
  -0.2228,-1.6704,0.6773,-0.9653,0.3129,1.3071,0.5270,1.3223,0.8837,
  1.5752,1.5463,0.3485,1.0323,0.9789,0.7037,-0.2327,-1.1178,0.3645,0.6191,
  -1.6313,0.0316,2.5215,-0.7120,-0.0572,-0.0438,-0.4335,0.0269,2.1549,0.2073,
  0.8005,-1.8403,-1.8438,-0.5719,0.8710,-1.4065,-0.1891,-1.5875,1.4439,-1.4930,
  -0.8540,3.3417,1.3026,1.2167,1.3044,0.2381,1.3117,2.1234,1.4459,0.4245,-1.5142,
  1.3858,0.6952,0.1820,-0.8612,0.1738,0.6170,0.2339,-1.8855,0.8520,0.5217,-1.0810,
  0.0800,-1.8095,0.8082,0.1628,2.2230,1.9686,-0.5698,-0.5748,0.0395,0.7742,0.8169,
  -0.0229,-0.3462,0.1906,0.5323,0.7484,0.1495,0.9008,-0.5658,0.2943,0.6540,-0.2600,
  -0.4667,0.1106,-0.7642,-0.1824,0.8960,-0.1834,-2.1588,0.0699,-0.0804,-0.0990,0.1369,
  2.2352,0.7690,1.6765,0.0581,-2.4032,0.0821,0.6313,-0.9350,0.4404,-0.8574,-1.2543,
  0.5067,-0.3169,0.1263,2.5355,0.6236,0.7904,-0.3012,2.1320,-0.0399,-0.0123,-0.8283,
  2.2573,0.6521,-0.7713,0.0159,0.3727,-2.3887,1.2362,0.1708,0.4444,0.2558,-0.2410,
  1.3628,1.2226,0.5057,1.6578,-1.2868,-0.4760,0.8111,1.0572,0.5980,-1.5289,-0.5721,
  1.0543,-1.7966,-0.1409,1.6421,-0.8713,-0.2342,-0.9455,-0.6573,0.5632,1.7570,-1.9810,
  1.7709,-0.8847,-1.6731,-0.8016,0.2276,-0.3521,-1.9081,-0.1011,-0.1792,-0.8473,-1.3107,
  1.6724,-0.3186,-1.6814,-0.2760,1.9600,0.1064,0.4535,-0.1512,0.9114,0.9971,-0.4393,
  -0.6188,-0.3648,1.8963,-0.3777,1.0937,-0.2678,0.2669,0.9831,-0.1987,1.1329,-0.1436,
  0.6589,0.0256,-0.3957,1.2932,-1.2804,1.0098,1.5316,0.2073,-0.4547,-0.3762,-0.0704,
  1.9113,0.6034,-0.1208,-0.6368,-0.3881,0.3308,-1.7661,-0.1792,-0.0456,-1.7433,1.4192,
  -0.2846,0.0838,-0.2417,-0.9515,0.8950,0.4647,-1.0623,1.7966,-1.0324,-1.0004,-1.7557,
  -1.2012,1.1142,0.5158,-1.1198,-1.4347,0.0648,0.5067,0.2607,-0.3515,-1.0674,0.0611,
  0.9891,-0.5812,-1.1467,1.8242,-1.1066,2.3115,0.2873,-0.4229,0.4727,0.1834,-2.4965,
  -0.2080,-1.3474,0.9617,0.3722,-2.3449,0.4910,-0.3210,1.8689,-0.0512,0.5884,1.3658,
  -0.7711,0.0298,2.3115,-0.3461,1.0402,-0.1871,-0.1752,0.1572,1.5274,-0.6710,-0.7540,
  -0.3596,-0.9899,-1.8438,1.0954,0.8229,0.5827,-0.8577,0.5888,-2.1219,1.9746,0.6419,
  -0.9776,1.4480,-0.3118,1.3812,0.7545,-0.3131,0.2086,0.8292,0.8498,-0.7224,-0.6204,
  -1.6104,-0.8892,-0.2761,-0.8286,0.6069,1.2374,1.0465,-0.7334,0.0382,-1.2147,-1.0619,
  2.2000,0.0364,0.8178,0.7110,0.9667,-0.4409,0.5349,-0.0752,0.3838,-0.3352,0.9829,
  -0.0739,-0.4585,0.0841,0.0191,-0.8353,-1.3749,0.3201,-1.2230,1.9741,-0.4041,1.2710,
  -0.5252,-0.5615,0.1972,0.1292,0.3640,-0.2525,-0.1798,-2.3638,0.7412,0.1299,1.7127,
  -0.0542,-0.7320,0.4734,-0.6967,-0.0375,-0.2116,-0.9375,0.0570,1.3480,0.8999,-0.5289,
  -2.4181,0.4147,-0.4854,-0.3061,1.4429,-0.2320,-0.4638,1.1448,-1.3122,-0.3307,1.0897,
  -0.1795,-1.7955,0.8761,0.2931,2.0349,0.4509,0.1393,-1.0878,0.5625,-0.3156,-0.5141,
  -0.1921,-0.9249,1.9995,-0.1105,0.8865,-0.7710,-2.1139,-1.7922,-2.1657,1.5024,0.5662,
  0.5329,-0.6992,1.4611,0.8424,-0.2540,0.0509,1.0046,0.7087,-1.6836,-0.0198,-0.0854,
  -0.8708,-0.5588,-0.1188,0.3869,0.4047,0.7451,0.9338,-0.1074,-3.1375,-0.0804,-2.0684,
  0.0080,-0.3345,0.8275,-0.4888,-0.9009,0.4886,-1.4416,0.6713,0.2515,-0.8937,1.2637,
  -0.4163,-0.3502,-1.5787,-0.8389,1.2111,-0.9347,1.0414,1.0965,1.7544,0.1421,0.1668,
  2.7685,-0.3857,-0.9299,0.3029,-2.0758,-0.8266,-1.0912,-1.3353,2.6118,0.8573,-0.4972,
  1.9619,0.4968,-0.8716,1.0555,0.0599,0.7958,-1.0009,0.6412,0.2060,-2.8716,1.1695,0.5474,
  -0.7015,-1.8406,-0.3661,-0.4807,0.9582,0.4715,-0.1504,0.5367,-1.6803,-0.6531,-1.4733,
  0.3410,-0.3648,2.3081,-0.3034,0.6522,1.4522,0.2434,-0.4114,-1.0330,0.1187,1.1601,0.5251,
  0.8947,-0.9491,0.6543,-0.1585,1.7485,-2.3924,0.7864,-1.4649,0.3973,-2.1587,-0.0786,
  -1.8716,-0.2816,1.3584,0.5160,0.8078,1.3714,2.7613,0.9549,0.5502,0.6822,-0.1838,-0.1586,
  -0.1475,1.9046,-1.6801,-1.0174,1.2562,-0.0873,0.1702,-0.4423,1.6937,-0.0718,2.2107,0.7909,
  1.9268,1.2949,-1.3738,-0.0578,0.9590,0.8072,0.2357,-0.8428,-0.0180,1.5205,1.7097,0.4393,
  -1.6251,0.3216,-1.3790,-0.6811,-0.3004,-1.3494,-1.2332,0.9205,-1.4991,-1.4195,1.2828,0.2195,
  -1.9409,-0.7975,-0.6417,-0.4713,-1.4806,0.2375,1.0899,-0.2663,1.0790,-0.7165,-0.1348,-1.4634,
  0.1335,0.6239,-1.5252,0.1423,0.3482,0.5666,-2.4088,0.6136,-0.5236,0.8318,0.1481,-0.1029,1.6342,
  0.5266,0.2449,-0.7195,-2.2949,0.4009,-1.2388,-0.2358,-2.6022,0.8983,-2.2012,-2.1747,-0.6935,0.7617,
  0.5428,0.4400,-0.8707,-0.6387,-1.7638,0.8815,-0.2396,-1.1159,-0.2169,-0.5923,0.6514,-0.3102,-1.0190,
  0.8689,-0.1681,-2.1663,0.0943,2.0598,0.4318,1.2901,0.0433,1.1648,-0.6071,-0.0923,0.9321,0.4461,0.6672,
  0.4945,-0.2757,1.0882,0.2670,-0.0571,0.8604,0.1923,-1.1660,1.0359,-1.2705,-1.3540,-0.4234,-1.6914,-0.3673,
  0.1457,1.8173,-0.4466,0.7242,1.1913,0.6992,-0.1144,-0.5635,-1.7162,-2.1148,-0.6904,-1.5475,-1.1017,0.0772,
  -0.2513,-2.0594,2.1818,-0.5980,-0.1814,-0.7319,-1.1684,-1.0062,2.4111,1.0046,0.9102,-0.7816,-0.6989,1.0771,
  0.2265,-1.0114,0.0693,-0.8358,3.4681,1.1465,0.5018,-0.7667,-0.2063,0.9578,0.7716,-1.0668,-0.3980,1.2897,
  1.0505,-0.4855,1.2391,-0.8351,1.2377,0.0015,1.3121,-0.2959,-0.0111,-0.2309,-0.0817,-1.0654,-1.4085,-0.5721,
  -0.3918,1.2999,0.1455,-0.9153,-0.1600,1.0549,-0.7765,-0.6024,0.1744,-0.4730,-0.4203,-0.0690,0.3500,0.8532,
  -1.9876,0.7441,-0.3034,0.4622,0.7287,0.0092,-1.3769,1.7666,-0.1215,0.9555,0.7345,0.5665,1.9333,-1.3568,
  -1.1539,-0.2939,-1.4847,-1.6204,0.1392,-0.3834,0.0524,-2.4078,-0.6527,-0.0710,0.0596,-1.0030,0.1448,-0.6325,
  0.1808,2.0819,0.2599,0.2548,0.8061,1.3750,0.3573,-1.6099,-0.4868,0.9807,0.6209,-0.5866,0.6032,-2.2220,
  -0.7806,1.3990,-0.2720,-0.9098,-0.1956,1.1833,-1.9641,-0.4088,-1.7336,-0.1773,2.7518,-0.2113,0.1897,0.5377,
  -0.2560,1.6272,-0.6056,-1.9224,0.0013,-0.7121,-2.2508,-1.1582,-0.0309,0.9751,0.0168,-0.0371,-0.1828,-0.1521,
  1.0560,-0.6758,1.1366,1.1874,-1.4342,0.8139,-0.7908,0.4637,-0.0766,-0.9719,0.4940,-0.1464,0.6846,-1.0164,
  -0.7670,-1.1601,-1.9200,-0.4619,0.2068,-1.0110,0.0876,1.6656,1.0697,-0.7749,-1.3828,-0.4068,-0.7388,-2.1489,
  -0.0517,-1.8742,0.9446,-0.5983,-0.1849,1.2811,-0.1324,-1.1601,-1.0679,-0.6863,1.2721,-1.9147,-1.2779,
  -0.9899,1.0667,1.5127,0.0666,0.5578,-0.9488,-0.9236,0.5230,0.2264,1.1340,-1.3889,0.1578,0.4030,2.9889,
  1.0385,2.1398,1.8558,1.8444,-0.9731,-0.8367,1.5678,-0.5559,-1.4322,0.0939,1.0952,-0.1090,-0.7214,0.2617,
  0.3851,0.4325,0.5633,-0.7195,0.7477,-0.5464,-0.9244,-0.8541,0.0050,-1.6017,-0.5586,-2.2216,-0.0455,
  -2.1338,-1.0277,-0.9645,-0.1960,-0.6573,-0.1796,-0.6401,0.9500,0.8011,-0.1623,-0.4633,0.5514,0.0272,
  1.2481,-1.0688,-0.2715,-0.2626,0.7047,-1.6155,0.2293,0.9471,-1.1211,-0.7304,0.9689,-0.6373,0.0787,
  1.3644,0.7326,0.3769,0.4070,-0.2337,0.3614,0.1905,0.8077,-0.0953,-0.1895,-0.9703,-0.0860,-0.8161,
  -0.2503,0.6521,0.4970,2.1791,1.1647,0.6015,-0.1974,-0.3619,0.2087,-0.3131,0.1041,2.1756,-0.2279,
  0.5127,-1.6989,1.1626,1.7845,-0.7780,1.4467,2.1055,-0.0092,1.7910,-0.3365,0.5907,-0.7037,0.7632,
  -0.2125,-0.3646,-0.2163,-0.4842,2.5591,-0.7157,-1.4726,1.3937,-0.5148,0.6196,-2.2594,0.5315,0.5218,
  0.0214,0.7244,1.5419,0.5879,-0.0830,-1.8409,-0.3593,0.5800,0.0681,0.4012,0.1809,0.6849,0.1520,-1.6759,
  0.5069,-0.3871,-0.1904,1.3473,0.1604,-0.6415,0.2211,-0.3433,-1.6929,-1.0609,-2.0438,0.7075,1.3930,-0.1408,
  -2.3294,-0.3889,-1.2880,-0.9249,-0.0232,0.2698,-0.2378,-0.6299,-0.5044,0.7340,1.4566,-0.5135,0.4814,1.6847,
  -3.6758,-0.3107,0.4215,-0.2290,-0.1886,-0.3514,0.2723,-0.6303,-0.8466,-2.2134,0.7881,-0.1610,-2.1110,0.6444,
  0.0427,0.4914,0.3784,0.0851,1.1276,0.0004,0.8118,-1.1530,0.9864,0.2712,-0.2328,0.4885,-2.6754,0.5511,-1.4685,
  -0.4019,-1.0756,0.8724,-0.0458,-0.3856,0.2131,0.6181,0.2638,0.0879,-0.7437,-0.2189,-1.0736,-0.0657,0.0758,
  0.4349,-1.4969,1.8161,-0.1856,-1.6347,-0.9528,-1.0370,1.0378,1.4111,-0.2523,1.1223,-0.1808,-0.1407,2.2995,
  1.2221,-0.3035,1.2170,1.2196,-1.7522,-0.7307,-0.7408,1.4720,0.1021,1.7708,-1.3520,0.2483,-1.5739,0.5927,
  0.2677,-0.9801,1.0752,0.6446,-0.8691,0.3451,-1.0070,-0.4985,-1.1508,0.2441,0.6928,0.0962,-0.1814,1.7480,
  -0.3832,0.5825,-0.7025,-1.4303,-0.7802,-0.6436,-0.5566,0.5506,-0.6683,-1.5713,0.2109,-0.2956,-2.1927,
  -1.7674,-1.1676,-0.2511,-0.6285,1.1141,-0.2613,-0.0442,-0.6757,0.8907,-0.3552,-0.3026,0.2521,0.2089,
  -0.7031,-0.0604,0.2154,-0.8697,-0.9924,-0.5792,0.4594,0.9757,-0.6547,-0.5038,-0.3065,0.3700,-1.0314,
  1.6517,0.0136,2.0466,0.7736,1.0502,-2.0171,-2.2157,1.3891,0.5011,-0.7559,-0.4423,0.5373,0.4652,
  -0.8701,-0.6975,0.9656,-0.5513,1.1559,0.5324,-1.3875,-1.4698,0.2842,1.1389,-2.5385,-0.6662,1.8272,
  -1.2620,-0.4627,0.3337,0.3231,-0.1838,-0.3671,-2.0903,-1.6260,-1.0719,-2.3093,-1.4983,0.5394,1.4106,
  0.2051,0.2081,-0.4459,1.0868,1.0099,1.0881,0.7952,2.6682,-1.8103,0.2607,-0.2156,0.2903,1.0671,
  -1.9529,1.0375,-0.7274,2.5705,-1.4494,0.9528,-0.3347,-1.0035,-0.8742,-0.1586,0.1129,1.8885,-1.0697,
  1.0055,-0.0257,-0.0104,-0.6061,-0.6267,-0.3861,-0.6518,1.7678,-0.1458,0.7245,1.4202,0.2861,-0.1393,
  2.0054,-0.0257,-2.2275,0.0648,0.0849,-0.1491,-0.1011,0.2612,-0.0117,-0.4782,1.2320,0.9165,0.5890,
  -0.8615,0.6835,-0.5800,-0.4748,0.7927,0.3448,1.8371,-1.3566,0.2356,-1.5783,0.4110,1.3809,-0.6871,
  -0.1132,0.7166,0.2085,0.7799,-0.9186,0.1176,2.0189,-0.4846,0.4419,-3.0388,1.0328,-0.7114,-0.0483,
  -0.6446,1.9414,1.8722,-1.5067,-0.2872,1.4905,0.5785,0.2464,0.0841,1.5629,0.5392,0.1063,-0.9628,
  -1.3641,-2.2998,1.0469,-0.3418,0.8668,0.2199,-1.0545,-0.2883,0.7008,0.0900,-0.4463,-0.1323,0.7154,
  1.2077,0.4784,0.1704,0.7064,-0.9403,1.1715,2.4885,-2.3435,-0.6139,-0.5304,-0.2291,0.5170,-1.7088,
  0.8902,-0.8025,1.1364,0.6513,-1.6044,1.6628,-0.7016,-0.2370,1.2484,-0.3178,-1.4907,-0.0778,1.5050,
  -0.4863,0.4100,-0.9315,2.6336,-2.1173,-1.0618,-0.0568,0.2498,-1.0658,-1.2619,0.2455,-0.2223,0.3813,
  1.3934,0.1586,-0.8637,-0.5552,-0.4816,1.9035,0.8826,-0.4048,1.8588,0.4547,1.6757,0.1098,-0.2461,
  -2.3133,0.3132,-0.5737,-0.7751,0.5027,1.9208,-0.7768,-0.6828,0.9601,-0.1202,-0.9207,-0.0866,-1.3751,
  0.2511,-1.2562,-0.0347,-0.3698,0.9724,0.2230,-0.6816,-0.9420,0.5300,1.5346,1.1600,1.5815,0.1751,
  -0.3129,1.2613,-1.0866,0.2284,0.8649,1.2168,1.7557,0.4355,-0.3651,1.0202,-0.6604,-1.0494,0.4124,
  -1.0330,0.2489,1.1755,0.7988,0.6594,-1.3470,0.8841,-0.3089,-2.0961,0.7462,-1.2915,0.9192,-1.5891,
  -2.6218,-1.6596,0.8073,-0.3482,1.2588,-0.9722,-0.0069,1.7402,0.0845,-0.6768,1.4390,-0.3400,-1.0901,
  -0.4229,1.3568,-0.6793,-0.0684,-1.2259,-3.1737,0.1792,-0.8417,0.4124,-1.3748,0.1849,-0.5775,-0.5275,
  -0.3407,-0.9867,-0.1361,0.9879,-0.3099,-0.4496,-1.3641,-2.8668,-0.3789,0.7859,-0.8609,1.5311,-0.1198,
  -0.0019,0.4794,0.8485,-0.9582,-0.9341,-0.8395,-0.7850,-0.6357,0.6514,0.3007,0.7098,1.4739,-1.2402,
  -1.0944,-0.1571,-2.1043,-0.7533,1.3553,1.2964,1.4505,0.2564,1.9812,0.9806,-1.0337,-0.7853,-0.6138,
  0.6903,-0.9451,-0.2840,-1.6451,-0.5696,-0.5773,0.7141,-0.3532,1.1156,-1.4451,1.7159,-0.2223,0.2588,
  -0.8497,0.1078,1.1759,-0.5046,-1.7174,-0.1599,-2.2034,-1.3003,0.5747,-0.5880,-0.9331,-0.0059,0.6067,
  0.8983,-0.3128,0.1937,-0.0236,0.0084,-0.2336,-0.1223,-0.2536,-1.3198,-1.3142,0.8060,1.5004,0.7110,
  0.8358,-0.1719,0.3716,-0.0425,0.3777,-0.1940,-0.5049,0.1067,1.0942,-1.6675,1.1942,-0.0957,0.3706,
  1.4143,2.4142,1.1641,0.9302,-0.6297,-1.1920,1.2045,-1.9450,-0.2355,-0.7365,-0.8010,-0.1886,1.4821,
  0.7371,0.0349,-1.3537,-1.5817,0.9415,0.2873,1.8814,0.1434,-0.1181,-1.9292,1.1517,-0.3855,0.7864,
  -0.7832,-1.6565,0.2667,-0.9098,-0.4747,-2.8992,-0.4760,0.9969,-1.3062,0.5083,0.4385,-1.3718,0.6758,
  -0.8908,-0.7876,-1.3083,1.2034,-1.2432,0.8728,0.0323,1.2894,0.1995,-1.3469,0.9336,0.1428,2.2733,
  -0.8905,-0.3605,0.2646,1.2321,-0.7571,0.2506,-0.4947,0.2657,-0.7457,0.3213,-2.4649,-0.2285,-0.1683,-0.7318,-0.0250];
*/
let W = [
  -0.50699, -1.336, 0.048318, -1.6616, -1.3892, 0.099, -0.66876, -0.72707, 1.5365, -0.31966, 1.808, 1.2701, -0.55925, 0.42036, -0.0020286, 0.42133, -1.2587, -0.41017, -0.7969, 1.1981, 0.40923, -1.0778, 0.96164, -0.95053, 0.28533, 0.059102, 0.19087, -0.90577, -1.6968, 0.23836, -0.43735, 0.17994, 0.32886, -1.3044, -2.1776, -0.031936, 1.0645, -2.2831, 0.89603, 0.042414,
0.12898, 0.046376, -1.4416, -0.13866, 0.12273, 1.036, 1.8244, -0.80633, -0.41825, 0.083433, -0.19166, 1.4059, -1.461, -0.37184, -1.8068, 0.44668, -0.23617, -2.6374, 0.052094, -0.84538, 0.69218, 0.65928, 0.22191, 0.83285, 2.0462, -2.5383, -0.92947, 0.13017, -0.15694, 1.3156, 1.7952, -0.002711, -0.49681, -1.5035, -0.10953, 0.6021, 0.076276, -0.77545, -0.26334, 1.62,
0.24374, -0.1248, -1.2809, -0.48, 0.44581, -0.85887, 0.037065, -0.40274, 0.66341, -0.16653, 0.56722, 2.7864, -0.59741, 0.28453, -1.6119, 1.4489, -0.56213, 0.18301, 0.12609, 1.1706, -0.31803, -0.13632, 0.86255, -0.26805, -0.069367, -0.22089, -1.2062, 0.49, 1.1654, -0.5947, 0.29256, -0.79439, 0.46658, 0.072789, 0.10416, 0.63197, -0.65419, 0.38981, 0.40446, 1.2899,
0.74802, 0.60888, 0.85387, -0.17615, 0.0093804, 1.1638, -0.23358, -0.70007, 2.176, -1.2821, 0.81697, -0.27545, -0.91607, 0.50002, 2.3799, 1.2361, -0.89733, 2.1576, -1.5403, -1.1128, -0.7217, 0.11903, -0.0052267, 0.71985, 0.39567, 0.17408, -0.2471, -0.68424, 0.2719, -0.20805, 0.11895, 0.30552, 0.95062, -0.47762, 1.157, -0.4776, -0.38037, 1.7703, 1.1693, -0.55817,
-0.081974, 0.25363, -0.25679, 0.1919, 0.67684, 0.15056, -0.29976, 0.37294, 1.603, 0.45317, 0.17754, -0.72245, 0.025905, -1.7041, 1.2697, 0.080802, -2.3894, -1.6581, 0.4333, 0.39354, 0.60177, 0.13973, -0.29025, -1.2473, -0.26695, 1.5132, -0.23622, -0.42409, 1.183, 0.85436, 1.5366, -0.9832, 0.68205, 0.38514, -1.5471, 0.010745, 0.7673, 0.20823, 1.6658, -0.56026,
-0.19171, 0.41299, 0.21906, -0.94815, -0.57383, -0.87366, 0.32247, 0.6322, 0.0095556, 0.11371, -0.73284, 1.7695, 0.50001, 2.4274, -0.23765, 0.82719, -2.2244, 0.38401, -0.027415, 0.27808, -0.55962, 0.29016, -1.5248, 0.65822, 1.3144, 1.2768, 0.25093, 0.75669, 0.6368, -0.20453, -1.5744, 1.9246, -0.69123, 0.19377, 0.66703, -0.66563, -1.2059, -0.02298, 1.0636, -0.18527,
-0.1787, 0.78436, 1.6911, -0.23666, 3.1699, -1.5406, 0.31592, -0.15833, -1.4715, -2.228, -0.18019, 0.0304, 0.56994, 0.87744, -1.356, -0.55994, 1.3745, -0.32812, -0.24367, -2.4176, -0.81469, 0.14723, 1.4503, 0.34302, 0.028794, 0.44008, -0.70274, -0.16992, 2.205, -1.5295, 0.74386, 1.1951, 1.0711, 0.79126, -0.22539, 0.053484, 0.26582, 1.309, 0.29611, -0.4559,
-0.67274, 1.1304, 0.3846, -1.1847, 0.24488, 0.79056, -0.28038, -0.61772, 1.0972, -0.70173, 0.54679, -1.237, -0.67654, -0.27523, 1.6459, 0.96477, 1.1604, -0.26049, -1.7133, -1.6033, 1.2478, -0.76044, 0.11089, 1.3863, 1.8481, 0.93669, 0.73689, 0.37702, 0.74469, -0.21776, -0.32539, 1.2916, -1.764, 0.36785, 1.1419, 0.77721, 0.80205, 0.32399, 0.29192, 0.44781,
-0.78636, 1.6403, -0.5582, 0.9972, 0.24762, 0.94688, 0.79652, 0.46214, -1.4972, -0.39291, 0.60862, 1.4285, 1.335, 1.5944, -1.3669, -2.0589, -2.4051, 1.7591, 0.78376, -0.77978, -1.5083, -0.81733, 0.71292, -0.47546, 0.90549, -1.1042, 0.16424, -1.6717, 0.32406, 0.63546, -0.65458, -1.6152, -0.77229, -0.85816, -0.66852, -1.5745, 0.057706, -0.66977, 1.3138, 0.57304,
-1.6194, -0.49765, 1.2481, -1.1945, 0.88921, 1.1523, 1.4136, 0.85719, -1.693, 0.1525, -1.668, -0.18596, -0.24573, -0.2804, -1.17, -0.59872, -0.79328, 0.86364, -0.53808, 0.83088, 0.091893, -0.96404, -0.34032, 0.77406, 0.068151, 0.85941, -0.014628, -2.1254, -0.47054, 0.62317, 1.6186, 0.62879, 0.063206, 2.0452, -1.3967, 0.79137, 1.6385, -0.32047, -0.53217, -0.17894,
0.18937, -0.10562, -0.024354, -0.54927, -1.2096, -1.7054, 0.52148, 0.30921, -0.98589, 1.135, -0.34503, -0.9345, 1.0914, -0.32536, -1.9922, -0.90191, 0.33914, -0.52394, 0.20855, -1.4411, 0.11641, -0.55017, -0.61886, 1.6472, -0.38926, 0.73872, 3.6131, 2.5772, 0.90486, -0.11739, 2.0857, -0.8489, -0.26381, -0.51424, -0.59537, 0.90756, -0.34835, 1.9216, -0.65474, 0.59185,
0.70233, 1.9324, 0.38394, 0.3638, -0.9024, 0.32057, 1.4499, -0.62546, 0.46355, -0.68699, -0.65179, 0.58639, -0.42918, -0.41778, 1.9287, 1.5298, 2.248, -0.36313, 0.07265, -0.17942, 0.69627, 0.16429, -0.45158, 2.22, 0.5552, 0.58781, 1.2917, -0.33857, -1.9243, 0.52579, 0.081332, -1.8157, -0.44397, 0.60712, -1.5287, 1.167, 0.28909, 0.22406, -0.17673, -1.5024,
-2.4251, -0.23521, 1.3397, 1.1227, 0.56426, -0.63122, -1.1389, 0.17057, 0.83277, 0.7966, -1.0567, -0.29035, 0.10455, 1.8475, 0.66405, -0.81615, 0.21594, -0.24922, 0.58369, -0.028085, 0.11654, 0.046399, -0.16331, -1.5801, -0.89732, -0.40346, -0.15196, 0.04805, -0.74671, -0.48984, 0.47184, 1.4544, -0.49734, 0.3255, 2.6077, -2.9967, 2.0453, -0.41672, -0.2534, -0.70681,
0.29196, 1.4813, -0.2467, -1.4599, -0.36973, 1.9406, -0.64838, -0.95878, -0.17126, 0.92174, -0.98132, -1.0251, -1.6224, -1.2678, 1.1831, 0.16765, -0.0091648, 0.37794, -0.015699, -0.68101, 0.038386, -1.0393, 0.44473, -0.56761, 1.056, -0.27958, -0.71224, 1.7118, -0.015736, 0.15552, -2.3337, -0.60809, -1.5948, 0.36766, -2.2138, -1.7905, 0.30704, 2.0011, 0.098304, -0.4419,
-0.036257, -0.23281, -0.88132, -0.64056, -1.469, -0.75316, -0.25856, -0.75778, 0.40008, -0.51992, 0.88024, -0.98332, 0.909, -0.32178, 0.35946, 0.32105, -0.73378, -0.3768, 0.46447, 0.65547, 0.90432, 0.35093, 1.4361, -1.0577, 0.46185, -0.075202, -0.64055, -0.23702, 0.74366, -1.4954, 0.18999, 2.5375, 1.9182, -0.12224, -0.76132, 0.55412, -0.027062, 1.2953, -0.74645, 0.32695,
-1.0105, -0.21535, -0.16198, -0.23764, 0.14229, 1.2019, -1.2456, 0.23369, -0.35648, -0.66224, -0.42723, 0.94821, 0.39718, -1.2741, 1.9575, -1.0314, 0.003706, 2.0964, -1.5023, 0.60359, -0.59249, 0.70732, -1.0822, -0.32592, -0.41479, 0.66891, -1.477, -0.5493, -1.5099, -1.0571, 2.2551, 2.197, 0.77094, -0.0064048, -1.0794, -1.0702, -1.9575, -0.32887, -0.57612, -1.5665,
-0.14042, 0.5115, 0.028761, 0.42432, 0.47167, -1.1194, 0.70546, 1.4018, 0.412, 0.94788, 1.1008, 0.41209, -1.0302, -0.33062, -0.62662, -0.18513, -0.45673, -0.32589, 0.50501, 0.034674, 0.66026, 1.042, -0.41664, -0.88315, 0.76223, -0.78773, -0.84594, 0.023141, -0.99873, -0.66207, -1.164, -0.50938, -1.1393, 0.85538, -1.3203, -1.0077, -0.137, 0.48569, 1.2386, -2.387,
-0.32111, 0.7633, -0.64169, 1.3287, -2.3142, -0.84622, 0.18195, -1.5555, 0.47213, -0.27579, -0.90938, -0.90986, -0.83442, 1.0471, 0.73069, -0.18036, 0.61389, 1.0344, -0.019807, 1.2918, 0.57259, 1.4084, 0.47563, -0.30483, 0.78975, 0.20326, -0.10038, 1.7873, 1.4643, 0.79932, -0.20614, 0.036426, 0.12807, -0.4862, -0.68154, 0.046742, 0.22208, 1.3157, -0.19107, -0.062213,
-0.97225, -0.11173, -1.2143, -1.0325, -0.22153, 1.0235, 0.55527, 1.1999, -1.7008, -1.5296, 0.3709, 0.089589, -0.12848, 1.8643, -0.39446, 0.8569, -0.58533, -1.1238, 0.73415, -0.75375, -0.38977, 1.3356, -0.39176, 0.23427, -0.24448, 1.9988, -1.4925, -0.13355, -0.5893, -0.19925, -0.80781, 0.77175, 1.0061, 0.80541, 0.59456, -0.16657, -0.91061, 0.65747, 0.99327, -0.6559,
-1.2664, 0.80558, -1.269, -0.7713, 1.3407, 0.42091, -1.2382, 0.30059, -0.98042, 0.92401, -0.2943, 0.54643, -0.83691, 0.17756, -0.38979, 1.3807, -0.28093, 1.4088, -0.72661, 0.72751, -2.2775, 0.22481, -0.29503, -1.0824, 0.83734, 0.51763, -1.4232, 0.14359, 0.96752, -0.31283, -0.87077, -1.7998, -0.23063, -0.11277, -0.07838, -0.05617, 0.37689, 2.4244, 0.10089, 0.31931,
0.36524, 0.61145, 0.12839, 0.42372, -0.6437, 0.024585, -0.88599, 0.87397, -0.17759, 0.67048, 1.5597, 0.38953, 1.0748, 2.5491, -0.11227, -1.2489, -0.37595, -0.31328, -0.71848, 1.0277, -0.26015, -1.5104, 0.27588, 0.86839, 0.63397, 0.036616, 0.67658, 0.45766, -1.8074, 0.9349, 0.72099, 1.9175, 0.44679, -1.4412, -0.14152, -0.059681, -1.5483, 0.087383, -2.1391, 0.76124,
-0.3686, 0.1279, 0.78359, -1.0189, 1.8392, 1.1103, -0.36622, -0.43598, -1.0401, 0.76635, 0.98623, 0.12767, 1.2205, -1.7036, 1.2296, 1.3086, 0.44721, -0.7611, 1.7224, 0.12155, 1.5651, 1.6314, -0.31554, 1.547, 0.56291, -0.30096, 1.4332, -0.85032, 1.8343, -1.9244, -0.26663, 1.0108, 0.92368, 0.27503, 0.436, -0.89715, 0.0069687, -0.0037167, 1.9378, -0.1314,
1.4041, -0.68292, -0.048382, 1.3728, 0.54949, 0.32417, 0.083864, -1.7359, -0.76475, -0.36431, 0.66326, 0.33826, -0.2125, -0.60838, -0.24127, 0.3725, -0.32345, 1.4023, -1.5262, -0.52159, -0.51606, -0.56852, -0.91468, -1.1992, -1.1515, -1.9601, 0.58293, -0.78877, 0.97622, -0.75978, -0.49723, 0.12223, 0.92823, 0.40587, 0.71511, 0.67934, -1.0619, -0.0002762, 0.003538, 0.039877,
0.94873, 0.59355, -0.47904, 1.088, -0.86631, -1.5467, -1.1353, 0.6069, 0.74024, 0.99084, 0.40673, -0.87226, 1.0022, -0.15399, 0.41008, -1.3753, -0.073726, -0.73797, -0.18753, 1.4223, -0.9188, 1.337, 0.20882, 0.23475, -1.2279, 1.6549, 1.3367, 0.30319, -0.19845, -0.71542, -0.030662, 0.26475, 0.59976, 0.70304, -0.72007, 1.6535, -1.3529, -1.6105, 0.41254, 0.39624,
-0.23453, -0.8449, -1.989, -0.69774, 0.69376, -0.18641, -0.75232, 0.69093, -0.58278, 0.23215, -1.0095, 1.9298, 0.638, -0.48593, 1.2329, -0.6767, -0.016343, 0.54132, -0.72996, -1.1891, -0.90031, 2.4926, -2.2733, -1.166, 0.23208, -0.14901, 1.4827, -1.5155, 0.57698, -0.031186, 0.21554, -1.7514, 0.14219, -1.0268, -0.061638, 0.9729, -1.1544, 0.89883, 0.61257, 0.77002,
-0.24002, 1.0505, 0.34593, 1.5443, 1.3123, 1.3457, -1.6518, -0.76447, 0.21057, 1.2898, 0.45323, -0.47868, 0.65503, 0.16501, 1.2567, -1.1283, 1.3542, -0.61367, 0.1951, -0.58423, 0.67869, -0.40606, 0.8562, 1.6173, -0.76358, 1.4871, -0.018203, 0.82393, -0.55699, -0.18062, -0.19921, -1.2225, 1.1828, 2.1099, -0.058756, -1.1323, -1.3087, 2.1946, 0.7714, -1.0682,
0.28729, 0.65091, 0.42933, -0.96982, 1.4636, 0.32484, -0.53709, 0.93589, -0.78301, -1.6211, 1.4393, -0.097859, 0.53168, -0.65048, -0.0053301, 2.4971, 0.42813, -0.83019, 0.39561, -0.45813, -0.356, -0.52561, -1.0879, 1.83, 1.3529, -0.57437, -0.56332, 0.20674, -1.7877, -1.6318, -1.4228, 0.12925, -0.034421, -1.0257, 1.3053, 0.592, -1.9169, 0.91145, -0.7952, -0.95847,
0.5962, -0.46477, -0.65524, -0.68475, 0.67321, 0.61395, -1.9201, -0.55589, 0.27302, -1.398, -0.37172, -0.21561, 1.2306, 0.074625, 0.39155, -0.051572, 0.42996, -0.31534, 0.32107, -0.51655, 0.39122, -0.88473, 0.84298, -0.78681, 1.433, -0.084728, -0.95398, 0.24946, -1.2143, -1.3321, -0.73109, -0.044395, 0.63338, -0.99177, 0.010976, 0.66866, 0.8906, 0.44086, -0.73864, 1.006,
-0.10395, 0.79246, -1.1138, 3.3178, -0.59132, 2.7393, -0.66066, -0.58003, -1.3598, -0.053988, 0.72258, 1.473, -0.31945, -0.16351, 0.36863, -0.24154, 0.068636, -1.7455, -0.10599, -0.38941, -0.64587, -0.92584, -1.5682, -0.59252, -1.5734, -1.3435, -0.20097, -0.25991, 0.45621, 1.0476, 0.043236, -0.48115, -0.80158, -0.044161, -0.21167, 0.93535, -0.19192, -1.6316, -0.1066, 0.15014,
-2.4723, 0.50084, -0.15017, -0.39357, -0.54461, 0.63303, 0.34111, 0.19881, -0.24719, -1.0238, -0.46851, 1.2723, -0.074252, 0.66993, -0.33936, 1.8619, -0.60027, -0.61086, -0.53761, -1.184, 0.14578, -1.4632, 1.0438, -3.0327, -0.82777, -0.61825, 0.45142, -0.26927, 0.72664, 0.43836, -0.91261, -0.67151, -0.45489, -0.018629, 0.55349, 0.47571, -1.2955, -0.17005, 0.28331, 0.69482,
0.37693, 0.36663, -1.3863, 1.5133, -1.2868, -0.40985, 1.4202, 1.8205, 1.032, -0.36447, 0.76003, -0.28589, -0.20789, 1.5352, 0.56507, -0.20143, 1.8973, 0.56488, -0.59028, -1.7927, -1.4926, -0.48338, 0.57342, -1.2873, -1.124, -1.2403, 1.1124, -0.2053, -1.0297, 1.128, 2.0201, 2.0825, 0.29757, 0.15742, -0.31184, 0.42846, -0.57544, 0.12717, -0.21845, -0.30918,
-0.34425, 0.85316, -0.7263, 0.49863, 0.8474, 1.493, -1.9403, -1.1798, -0.047747, 0.086786, -1.741, 0.52568, -0.81964, -0.55166, -0.31194, -1.4365, 0.57219, -0.018749, -0.26009, -0.077335, -1.4958, 1.3501, 1.828, 0.87796, -0.17976, -0.40795, -0.35388, 0.94237, -0.28625, 0.33045, 0.045054, -0.26018, -0.55288, 1.7597, 1.5408, -0.20033, 1.2422, -1.8677, -1.1184, -1.2462,
1.4688, 0.56351, 0.62316, -0.50452, 0.73598, -0.34968, -0.071469, 0.40302, -1.2918, -0.09675, -0.52189, -0.095065, -0.62162, 0.88264, -0.56144, -1.1041, 0.80665, -0.65397, 0.16884, 0.82692, 0.0036671, -0.9243, 0.12199, -2.1667, 0.57875, -0.94019, -0.29676, 1.3382, 1.8998, -0.6357, -0.97608, 1.1036, 0.75792, 0.057022, -2.3543, -0.22003, 1.0644, -0.24328, 1.582, -0.048314,
1.0306, 0.04534, 1.0347, 1.9498, -0.95616, 0.12341, 0.2756, -1.2662, -0.017532, -0.49811, 0.81372, -0.05687, -0.53568, 0.36606, -2.281, -0.25348, 0.53049, 0.49784, 0.88631, -0.49843, -0.47437, -0.59371, 0.38235, 0.68224, -0.64979, -0.084107, 0.39454, 2.7258, 0.56057, 0.24533, -0.6785, -0.50676, -0.41131, -1.1555, 1.2443, 0.20834, 0.35929, 0.71338, 1.4129, 0.06541,
1.3025, 2.5331, 0.50567, 0.71678, 1.3784, 0.3621, -0.080288, 0.19022, -0.19068, 0.7189, 1.008, 0.96382, 1.2895, 1.2164, -1.336, 1.2776, 1.2672, 0.84037, -0.35547, -1.0399, 0.1701, -0.81707, 0.64524, 0.8586, 0.028491, -0.70376, -0.9615, -1.0101, 1.1426, 0.42029, -0.91051, -1.5711, 0.15445, -0.045657, 0.11915, -0.18902, -1.2319, 0.79859, 1.8823, 1.2632,
0.5576, 0.80109, 0.50896, -0.6106, 0.24738, 0.9702, 2.5352, 0.24491, 2.2024, 0.81951, -0.013171, -0.03711, -0.88161, -0.27057, -2.5937, -0.43123, -0.37094, -0.61794, 0.20009, -0.82269, 1.0966, 1.2902, -0.54915, -0.86876, 0.59373, -0.12357, -0.71252, 1.2614, 1.3344, -0.13955, 1.4723, 0.22452, 0.26133, 0.6564, -0.11355, 0.88131, 1.5064, -0.36844, 1.2474, 0.28563,
-0.54077, -0.63717, -0.12481, 0.72936, -0.94731, -0.45631, -0.48438, 1.3908, 2.4765, 0.0085307, 0.073201, -0.81837, -0.84754, -0.24337, -1.4238, 0.36788, 1.8715, 1.4109, -1.6322, 0.81096, -0.83218, 1.016, 0.76276, -0.13744, 0.83657, -1.323, 0.46908, -0.45262, 0.51454, 0.12838, 0.86178, 1.2691, 0.35107, 0.8907, -0.044292, 0.067508, -1.835, 0.24842, 1.1021, -1.3356,
1.2036, 0.56736, 1.5245, 1.3496, -2.0122, 0.43588, -0.36174, 2.6332, -1.0825, 0.65105, -1.9527, 0.49142, 1.7078, -0.513, 0.47266, 0.064741, -0.041146, -1.0007, -0.28304, -0.91252, -0.40944, 1.1187, -1.5848, -1.2404, -0.55147, -0.37659, 0.65529, -0.60844, 0.48096, 1.7145, 0.28361, 0.88674, -0.88839, -1.0869, -1.681, 0.065648, 0.76778, -1.0376, 0.87414, 0.098179,
-0.44604, -0.10354, -0.61623, 0.68875, 0.12016, -1.1459, -1.5331, -0.27733, 0.81791, -0.58524, -0.70992, -0.33876, -1.1442, -0.13084, 0.52691, -0.39142, 0.65568, 0.31348, 0.72459, 0.83543, -0.33739, 1.2628, -0.33601, -0.62788, -0.20929, -0.86813, 0.46887, -1.1812, -0.094133, 0.19492, 0.44703, -0.010628, -0.34493, 0.31697, -0.63841, -0.05583, -1.9554, -0.091935, -0.46712, 0.4792,
-1.8984, -0.79651, -1.8735, -1.5056, 0.77719, 1.423, 0.89513, 1.0853, 0.157, 3.0055, 0.027436, 1.6243, -1.353, -1.3845, -1.8015, -0.27023, -0.88241, -0.7772, 0.35842, -0.3927, -0.27832, 0.52072, -0.18446, 0.68782, -0.80524, -0.24013, -0.040805, 0.25069, 0.62961, 1.0296, -1.4935, -0.12477, -0.27224, -0.38969, -0.29636, -0.018842, -0.29212, -1.0124, 0.7889, 1.4878
];
/*
for (let i = 0; i < M; i++){
  for(let j = 0; j <= i; j++) {
    let x = W[i * M + j];
    W[i * M + j] = W[i + j * M];
    W[i + j * M] = x;
  }
}
*/
var frames = 0;
var frameBuffer = [];
var currentFrame = 0;
var timer = null;
var appending = false;
var decoding = false;
var decoder = undefined;

function matFromArray(rows,cols,type,array) {
  
  const buffer = Buffer.from(array);

  var mat = new cv.Mat(buffer, rows,cols,type);

  return mat;

}

function fft2(array, rows = 40, cols = 40) {

  let real = undefined;

  real = array instanceof cv.Mat  ?
    array                         :
    //cv.matFromArray(rows, cols, cv.CV_64F, array); // this was commented! (matFromArray)
    matFromArray(rows, cols, cv.CV_64F, array);

  //let planes = new cv.MatVector(); // this was commented! (matFromArray)

  //let complex = new cv.Mat();//delete // this was commented! (matFromArray)
  //let imaginary = new cv.Mat.zeros(rows, cols, cv.CV_64F);//delete // this was commented! (matFromArray)
  let imaginary = new cv.Mat(rows, cols, cv.CV_64F, 0); 
  //planes.push_back(real); // real plane   // this was commented! (matFromArray)
  //planes.push_back(imaginary);// imaginary plane    // this was commented! (matFromArray)
  //cv.merge(planes, complex);    // this was commented! (matFromArray)
  let complex = matFromArray(rows, cols, cv.CV_64F, [real.getDataAsArray(), imaginary.getDataAsArray()])
  
  // actual Fourier transform 
  //cv.dft(complex, complex, cv.DFT_COMPLEX_OUTPUT); // this was commented! (matFromArray)
  complex = complex.dft(cv.DFT_COMPLEX_OUTPUT, 0) // this was added (matFromArray)
  
  // split the real and imaginary planes 
  //cv.split(complex, planes);
  let planes = complex.splitChannels(); //??????????????????????????????????????????
  
  //let re = planes.get(0); // this was commented! (matFromArray)
  let re = planes[0];
  //let im = planes.get(1); // this was commented! (matFromArray)
  let im = planes[1];

  for (let i = 0; i < rows; i++) {

    for (let j = 0; j < cols; j++) {

      //re.doublePtr(i, j)[0] = re.doubleAt(i, j).toFixed(4); // this was commented! (matFromArray)
      //im.doublePtr(i, j)[0] = im.doubleAt(i, j).toFixed(4); // this was commented! (matFromArray)

      //re.set(i, j, re.at(i, j).toFixed(4)) // this was commented! (matFromArray) and must be uncommented
      //im.set(i, j, im.at(i, j).toFixed(4)) // this was commented! (matFromArray) and must be uncommented

    }

  }

  //real.delete(); // this was commented! (matFromArray)
  //complex.delete(); // this was commented! (matFromArray)
  //imaginary.delete(); // this was commented! (matFromArray)

  //return planes; // this was commented! (matFromArray)
  return [re, im];
}

function ifft2(array, rows = 40, cols = 40) {
  //let complex = undefined; // this was commented! (matFromArray)
  let ret;

  let complex = array instanceof cv.Mat ? array : matFromArray(rows, cols, cv.CV_64F, array); // new, uncertain (matFromArray)

  //complex = array instanceof cv.MatVector ? // this was commented! (matFromArray)
  //  new cv.Mat()                          : // this was commented! (matFromArray)
  //  null;                                   // this was commented! (matFromArray)

  if (complex) {

    //cv.merge(array, complex); // this was commented! (matFromArray)
    
    // This is how MATLAB does ifft2, pay great attention
    //cv.dft(complex, complex, cv.DFT_INVERSE | cv.DFT_SCALE); // this was commented! (matFromArray)
    complex = complex.dft(cv.cv.DFT_INVERSE | cv.DFT_SCALE, 0); // this was added (matFromArray)

    // split the real and imaginary planes //
    //cv.split(complex, array); // this was commented! (matFromArray)
    let planes = complex.splitChannels();

    //let re = array.get(0); // this was commented! (matFromArray)
    let re = planes[0];
    //let im = array.get(1); // this was commented! (matFromArray)
    let im = planes[1];
  
    for (let i = 0; i < rows; i++) {
  
      for (let j = 0; j < cols; j++) {
  
        //re.doublePtr(i, j)[0] = re.doubleAt(i, j).toFixed(4); // this was commented! (matFromArray)
        //im.doublePtr(i, j)[0] = im.doubleAt(i, j).toFixed(4); // this was commented! (matFromArray)
        re?.set(i, j, Number(re.at(i, j)).toFixed(4) | 0) // this was commented! (matFromArray) and must be uncommented
        im?.set(i, j, Number(im.at(i, j)).toFixed(4) | 0) // this was commented! (matFromArray) and must be uncommented
  
      }
  
    }

    //complex.delete(); // this was commented! (matFromArray)
    ret = matFromArray(rows, cols, cv.CV_64F, [re?.getDataAsArray(), im?.getDataAsArray()]);

  }

  //return array; // this was commented! (matFromArray)
  return ret;
}

function phaseOnly(cv_MatVector) {
  //let phased = new cv.MatVector();// this was commented! (matFromArray)
  let phased = [];
  let realPlane = cv_MatVector[0].copy();
  let imaginaryPlane = cv_MatVector[1].copy();
  //let realPlane = cv_MatVector.get(0).clone();    // this was commented! (matFromArray)
  //let imaginaryPlane = cv_MatVector.get(1).clone(); // this was commented! (matFromArray)

  let n = realPlane.rows;

  for (let ii = 0; ii < n; ii++) {
    for (let jj = 0; jj < n; jj++) {
      //if (realPlane.doubleAt(ii, jj) !== 0 ||           // this was commented! (matFromArray)
      //    imaginaryPlane.doubleAt(ii, jj) !== 0) {      // this was commented! (matFromArray)
      if(realPlane.at(ii, jj) !== 0 || imaginaryPlane.at(ii, jj) !== 0) {

            //let re = realPlane.doubleAt(ii, jj).toFixed(4); // this was commented! (matFromArray)
            
            let re = Number(realPlane.at(ii, jj)).toFixed(4);
            //let im = imaginaryPlane.doubleAt(ii, jj).toFixed(4);  // this was commented! (matFromArray)
            let im = Number(imaginaryPlane.at(ii, jj)).toFixed(4);

            if (isNaN(re)) re = 0;
            if (isNaN(im)) im = 0;

            
            let num = math.complex(
              re, //!!
              im
            ); //!!

            let den =
            math.complex(
              math.abs(
                math.complex(
                  re, //!! 
                  im))); //!!

            let result = math.divide(num, den);

            let rre = Number(result.re).toFixed(4) | 0;
            let ire = Number(result.im).toFixed(4) | 0;

            //realPlane.doublePtr(ii, jj)[0] = rre; //!! rre // this was commented! (matFromArray)
            realPlane?.set(ii, jj, rre);
            
            //imaginaryPlane.doublePtr(ii, jj)[0] = ire; //!! // this was commented (matFromArray)
            imaginaryPlane?.set(ii, jj, ire);

      } else {
        //realPlane.doublePtr(ii, jj)[0] = 1; // this was commented! (matFromArray)
        realPlane.set(ii, jj, 1)
        //imaginaryPlane.doublePtr(ii, jj)[0] = 0; // this was commented! (matFromArray)
        imaginaryPlane.set(ii, jj, 0);
      }
    }
  }

  //phased.push_back(realPlane);// this was commented! (matFromArray)
  phased.push(realPlane);
  //phased.push_back(imaginaryPlane);// this was commented! (matFromArray)
  phased.push(imaginaryPlane);

  return phased;
}

function conj(cv_MatVector) {
  //let imaginaryPlane = cv_MatVector.get(1); // this was commented! (matFromArray)
  let imaginaryPlane = cv_MatVector[1];
  for (let r = 0; r < imaginaryPlane.rows; r++) {
    for (let c = 0; c < imaginaryPlane.cols; c++) {
      //imaginaryPlane.doublePtr(r, c)[0] *= (-1); // this was commented! (matFromArray)
      imaginaryPlane.set(r, c, imaginaryPlane.at(r, c) * (-1));
    }
  }
  return cv_MatVector;
}

function dotMultiply(cv_MatVector1, cv_MatVector2) {
  //if (cv_MatVector1.get(0).rows !== cv_MatVector2.get(0).rows || // this was commented! (matFromArray)
  //    cv_MatVector1.get(0).cols !== cv_MatVector2.get(0).cols)  // this was commented! (matFromArray)
  //  return null;                                                // this was commented! (matFromArray)
  if (cv_MatVector1[0]?.rows !== cv_MatVector2[0]?.rows ||
      cv_MatVector1[0]?.cols !== cv_MatVector2[0]?.cols)
      return null;

  //let result = new cv.MatVector();  // this was commented! (matFromArray)
  let result = [];
  //let rp1 = cv_MatVector1.get(0).clone(); // this was commented! (matFromArray)
  //let ip1 = cv_MatVector1.get(1).clone(); // this was commented! (matFromArray)
  //let rp2 = cv_MatVector2.get(0); // this was commented! (matFromArray)
  //let ip2 = cv_MatVector2.get(1); // this was commented! (matFromArray)
  let rp1 = cv_MatVector1[0].copy();
  let ip1 = cv_MatVector1[1].copy();
  let rp2 = cv_MatVector2[0].copy();
  let ip2 = cv_MatVector2[1].copy();
  
  //if (currentFrame >= 155) {
    //console.log(rp1.data64F)
    //console.log(currentFrame, rp1.doubleAt(20, 0))
  //}

  for (let r = 0; r < rp1.rows; r++) {
    for (let c = 0; c < rp1.cols; c++) {
      
      //let r1 = rp1.doubleAt(r, c) || 0; // this was commented! (matFromArray)
      //let i1 = ip1.doubleAt(r, c) || 0; // this was commented! (matFromArray)
      //let r2 = rp2.doubleAt(r, c) || 0; // this was commented! (matFromArray)
      //let i2 = ip2.doubleAt(r, c) || 0; // this was commented! (matFromArray)
      let r1 = rp1.at(r, c) || 0;
      let i1 = ip1.at(r, c) || 0;
      let r2 = rp2.at(r, c) || 0;
      let i2 = ip2.at(r, c) || 0;

      //if (currentFrame >= 155) {
        //console.log(r1, i1, r2, i2)
      //}

      let complex1 = math.complex(r1, i1);

      let complex2 = math.complex(r2, i2);

      let complexProduct = math.multiply(complex1, complex2);

      //rp1.doublePtr(r, c)[0] = complexProduct.re.toFixed(4); // this was commented! (matFromArray)
      rp1.set(r, c, complexProduct.re.toFixed(4) | 0);
      //ip1.doublePtr(r, c)[0] = complexProduct.im.toFixed(4); // this was commented! (matFromArray)
      ip1.set(r, c, complexProduct.im.toFixed(4) | 0);
    }
  }

  //result.push_back(rp1); // this was commented! (matFromArray)
  //result.push_back(ip1); // this was commented! (matFromArray)
  result.push(rp1);
  result.push(rp2);

  return result;
}

function abs(complexArray) {

  if (!complexArray) {
    return null;
  }
  
  //let real = complexArray.get(0).data64F;//.map(a => a); // this was commented! (matFromArray)
  //let imaginary = complexArray.get(1).data64F;//.map(a => a); // this was commented! (matFromArray)
  let [real, imaginary] = complexArray.splitChannels();
  real = real?.getDataAsArray();
  imaginary = imaginary?.getDataAsArray();

  let length = real.length;

  let result = [];

  for (let i = 0; i < length; i++) {

    let res = math.abs(
      math.complex(
        Number(real?.[i]).toFixed(4) | 0, 
        Number(imaginary?.[i]).toFixed(4) | 0)
    );

    result.push(parseFloat(Number(res).toFixed(4)));

  }

  return result;
}

function find (array, value, rows = 40, cols = 40) {
  let x = [];
  let y = [];

  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      if (array[i * rows + j] > value) {
        x.push(i);//i
        y.push(j);//j
      }
    }
  }

  return { x, y }; //x, y
}

function dec2bin(number, minBits) {
  let result = (number >>> 0).toString(2); // number.toString(2)
  if (result.length < minBits) {
    result = result.padStart(minBits, '0');
  }
  return result;
}

function bin2dec(binaryString) {
  return parseInt((binaryString + '').replace(/[^01]/gi, ''), 2);
}



function detectWatermark (imageData) {

  let payload = -1;

  const rows = imageData instanceof cv.Mat ? imageData.rows : -1;
  const cols = imageData instanceof cv.Mat ? imageData.cols : -1;


  let A = [0.2500, -0.5000, 0.2500, -0.5000, 1.0000, -0.5000, 0.2500, -0.5000, 0.2500];
  //let Am = cv.matFromArray(3, 3, cv.CV_64FC1, A); // this was commented! (matFromArray)
  let Am = matFromArray(3, 3, cv.CV_64FC1, A);
  let anchor = new cv.Point(-1, -1);

  let Af = Am.flip(0); // this was added! (OpenCV peculiarity: https://docs.opencv.org/4.5.1/d4/d86/group__imgproc__filter.html#ga27c049795ce870216ddfb366086b5a04)
  let newAnchor = new cv.Point(Af.cols - anchor.x - 1, Af.rows - anchor.y - 1);

  //let filtered = new cv.Mat(); // this was commented! (matFromArray)
  
  
  // 2D convolution - image filtering //
  //cv.filter2D(imageData, filtered, cv.CV_64F, Am, anchor, 0, cv.BORDER_ISOLATED); // this was commented! (matFromArray)
  //let filtered = imageData.filter2D(cv.CV_64F, Am, anchor, 0, cv.BORDER_ISOLATED); // this was commented AND MUST BE UNCOMMENTED FOR TESTS! (matFromArray)
  let filtered = imageData.filter2D(cv.CV_64F, Af, newAnchor, 0, cv.BORDER_ISOLATED); // THIS WAS ADDED FOR TESTS!
  //cv.imshow('filtered', filtered);cv.waitKey();
  let c = Math.floor(cols / M);
  let r = Math.floor(rows / M);
  
  // preparing the matrices for Fourier domain operations 
  //let rep = new cv.Mat.zeros(M, M, cv.CV_64F);//delete // this was commented! (matFromArray)
  let rep = new cv.Mat(M, M, cv.CV_64F, 0);
  for (let ii = 0; ii < M; ii++) {

    for (let jj = 0; jj < M; jj++) {

      //rep.doublePtr(ii,jj)[0] = 0; //!! // this was commented! (matFromArray)
      rep.set(ii, jj, 0);

      for (let j1 = 0; j1 < r; j1++) {

        for (let j2 = 0; j2 < c; j2++) {

          //rep.doublePtr(ii,jj)[0] +=                        // this was commented! (matFromArray)
          //  filtered.doubleAt(ii + j1 * M, jj + j2 * M);    // this was commented! (matFromArray)
          rep.set(ii, jj, rep.at(ii, jj) + filtered.at(ii + j1 * M, jj + j2 * M));
        }
      }
    }
  }

  //console.log(rep.getDataAsArray())

  // !! NEW - just for testing purposes
  /*
  let _rep = [];

  for (let i = 0; i < M; i++) {

    for (let j = 0; j < M; j++) {

      //_rep.push(rep.doubleAt(i, M - j - 1)); // this was commented! (matFromArray)
      _rep.push(rep.at(i, M - j - 1));
    }
  }
  */
  //console.log(_rep)
  //console.log(filtered)
  //let x = phaseOnly(conj(fft2(W)));
  //console.log(x.get(0).data64F, x.get(1).data64F)
  // R=ifft2(phaseOnly(fft2(rep)).*phaseOnly(conj(fft2(W))));
  let R = ifft2(
    dotMultiply(
      phaseOnly(fft2(rep)),
      phaseOnly(conj(fft2(W)))
    )
  );
  //console.log(R.get(0).data64F)

  // R = abs(R)
  let Ra = abs(R);
  //console.log('R', Ra)

  let nbits = Math.floor(Math.log2(M) - 1);
  let threshold = 0.2;// 0.2

  let {x, y} = find(Ra, threshold); // 'Ra' is abs(R)
  //console.log(found);
  if (x.length == 2) {
    let dx = x[1] - x[0];
    let dy = y[1] - y[0];
    //if (Math.abs(dx) < M/2 && Math.abs(dy) < M/2) {
    if (Math.abs(dx) < M/2 && Math.abs(dy) < M/2) {
      payload =
      bin2dec(
        dec2bin(Math.abs(dy), nbits) +
        dec2bin(Math.abs(dx), nbits)
      );

    }
  }

  //filtered.delete(); // this was commented! (matFromArray)

  //R.delete(); // this was commented! (matFromArray)

  //imageData.delete(); // this was commented! (matFromArray)

  decoding = false;

  return payload;
}

function processFrame(frame) {
  
  //let frameData = frame.getDataAsArray();
  

  //let clampedArrayRgb = new Uint8ClampedArray(frameData, 54).reverse(); // this was commented! (matFromArray)
  //let clampedArrayBGR = new Uint8ClampedArray(frameData);  // this was added!
  //let clampedArrayBgr = new Uint8ClampedArray(frame, 54);
  
  //let rgbImage = new cv.matFromArray(360, 640, cv.CV_8UC3, clampedArrayRgb);// this was commented! (matFromArray)
  //let rgbImage = new matFromArray(360, 640, cv.CV_8UC3, clampedArrayRgb);

  

  //let bgrImage = new cv.matFromArray(360, 640, cv.CV_8UC3, clampedArrayBgr);

  //let grayImage = new cv.Mat(360, 640, cv.CV_8UC1); // this was commented! (matFromArray)
  //cv.cvtColor(rgbImage, grayImage, cv.COLOR_RGB2GRAY, 1); // this was commented! (matFromArray)
  //cvtColor(rgbImage, grayImage, cv.COLOR_RGB2GRAY, 1); // this was commented! (matFromArray)
  //let grayImage = rgbImage.cvtColor(cv.COLOR_RGB2GRAY, 1); // this was commented! (matFromArray)
  let grayImage = frame.cvtColor(cv.COLOR_BGR2GRAY, 1);
  
  //if (currentFrame === 1) fs.writeFileSync(path.join(process.cwd(), 'node-frame'), grayImage.getDataAsArray().toString());
  
  //cv.cvtColor(bgrImage, grayImage, cv.COLOR_BGR2GRAY, 1);

  let payload = detectWatermark(grayImage);

  console.log('PAYLOAD', payload)

  //rgbImage.delete(); //this was commented! (matFromArray)

}

process.on('message', (m) => {

  //console.log('CHILD got message', m);

  const videoPath = path.join(__dirname, '../assets/watermarked/WMAO2.avi');

  const video = new cv.VideoCapture(videoPath)
  

  const frames = video.get(cv.CAP_PROP_FRAME_COUNT);
  console.log(frames, 'frames')


  let frame;
  currentFrame = 1;

  while (!(frame = video.read()).empty) {

    //let frame = video.read();

    //f (!frame.empty) {

      processFrame(frame);
      currentFrame++;

    //} else {

    //  break;

    //}

    //i++;


  }

  video.release();

  process.send('message from CHILD');

});
